.. _troubleshooting:

**********************
Troubleshooting Errors
**********************

Use the troubleshooting information documented in this section to address
errors that may appear while :ref:`installing <insttroubleshooting>` or
:ref:`using <runtimetroubleshooting>` node-oracledb in Thin or Thick mode.

Questions about node-oracledb can be asked in `GitHub Discussions
<https://github.com/oracle/node-oracledb/discussions>`__ or posted on `Slack
<https://node-oracledb.slack.com/>`__ (`link to join Slack
<https://join.slack.com/t/node-oracledb/shared_invite/enQtNDU4Mjc2NzM
5OTA2LWMzY2ZlZDY5MDdlMGZiMGRkY2IzYjI5OGU4YTEzZWM5YjQ3ODUzMjcxNWQyNzE4MzM5YjN
kYjVmNDk5OWU5NDM>`__).

.. _insttroubleshooting:

Installation Errors
===================

You may encounter issues while installing node-oracledb. Ensure that you have
installed the node-oracledb :ref:`prerequisites <prerequisites>`. Review the
error messages closely.

- If there is a network connection error, check if you need to use
  ``npm config set proxy``, or set proxy environment variables such as
  ``http_proxy`` and/or ``https_proxy``.

- Use ``npm install --verbose oracledb``. Review your output and logs.

- If the installation problem still persists, then try to install
  node-oracledb in a different way. **Google anything that looks like an
  error.** Try some potential solutions.

- Try running ``npm cache clean -f`` and deleting the
  ``node_modules/oracledb`` directory.

.. _runtimetroubleshooting:

Error Messages
==============

Some common :ref:`DPI <dpierr>` and :ref:`NJS <njserr>` errors with
node-oracledb Thin and Thick modes are detailed in this section. Each error
includes information about the probable cause and the recommended action which
may resolve the error.

.. _dpierr:

DPI Error Messages
------------------

The error messages with prefix ``DPI`` are generated by the
`ODPI-C <https://oracle.github.io/odpi/>`_ code which is used by the
node-oracledb Thick mode.

.. _dpi1047:

DPI-1047
++++++++

.. list-table-with-summary::
    :stub-columns: 1
    :class: wy-table-responsive
    :widths: 5 35
    :summary: The first row displays the DPI-1047 error message. The second row displays the probable cause for the DPI-1047 error. The third row displays the possible solution to resolve the DPI-1047 error.

    * - Message
      - ``DPI-1047: Cannot locate an Oracle Client library``
    * - Cause
      - Initializing node-oracledb Thick mode failed because the Oracle Client library could not be loaded.
    * - Action
      - You can:

        - Review the :ref:`features available in node-oracledb's default Thin mode <featuresummary>`. If Thin mode suits your requirements, then remove calls in your application to :meth:`oracledb.initOracleClient()` since this loads the Oracle Client library to enable Thick mode.

        - Review any messages, the :ref:`installation instructions <installation>`, and see :ref:`Initializing Node-oracledb <initnodeoracledb>`.

        - On Windows and macOS, pass the ``lib_dir`` library directory parameter in your :meth:`oracledb.initOracleClient()` call. The parameter should be the location of your Oracle Client libraries. Do not pass this parameter on Linux.

        - Check if the Node.js process has permission to open the Oracle Client libraries. OS restrictions may prevent the opening of libraries installed in unsafe paths, such as from a user directory. On Linux you may need to install the Oracle Client libraries under a directory like ``/opt`` or ``/usr/local``.

        - Check if Node.js and your Oracle Client libraries are both 64-bit or both 32-bit. The ``DPI-1047`` message will tell you whether the 64-bit or 32-bit Oracle Client is needed for your Node.js. Run ``node -p 'process.arch'`` and compare with, for example, ``dumpbin /headers oci.dll`` (on Windows), ``file libclntsh.dylib`` (macOS) or ``file libclntsh.so.*`` (Linux).

        - Set the environment variable ``DPI_DEBUG_LEVEL`` to 64 and restart node-oracledb. The trace messages will show how and where node-oracledb is looking for the Oracle Client libraries.

          At a Windows command prompt, this could be done with::

              set DPI_DEBUG_LEVEL=64

          On Linux and macOS, you might use::

              export DPI_DEBUG_LEVEL=64

        - On Windows:

          - If node-oracledb is using libraries from a local database installation, ensure that this database is the `currently configured database <https://docs.oracle.com/pls/topic/lookup?ctx=db21&id=RIWIN-GUID-33D575DD-47FF-42B1-A82F-049D3F2A8791>`__.

          - If you are not using passing a library directory parameter to :meth:`oracledb.initOracleClient()`, then restart your command prompt and use ``set PATH`` to check if the environment variable has the correct Oracle Client listed before any other Oracle directories.

          - Use the ``DIR`` command to verify that ``OCI.DLL`` exists in the directory passed to :meth:`oracledb.initOracleClient()` or set in ``PATH``.

          - Check if the correct `Windows Redistributables <https://oracle.github.io/odpi/doc/installation.html#windows>`__ have been installed.

        - On Linux:

          - Check if the ``LD_LIBRARY_PATH`` environment variable contains the Oracle Client library directory. Some environments such as web servers reset environment variables.

          - If you are using Oracle Instant Client, a preferred alternative to ``LD_LIBRARY_PATH`` is to ensure that a file in the ``/etc/ld.so.conf.d`` directory contains the path to the Instant Client directory, and then run ``ldconfig``.

.. _dpi1072:

DPI-1072
++++++++

.. list-table-with-summary::
    :stub-columns: 1
    :class: wy-table-responsive
    :widths: 5 35
    :summary: The first row displays the DPI-1072 error message. The second row displays the probable cause for the DPI-1072 error. The third row displays the possible solution to resolve the DPI-1072 error.

    * - Message
      - ``DPI-1072: the Oracle Client library version is unsupported``
    * - Cause
      - The connection to Oracle Database failed because the Oracle Client library version used is not supported by node-oracledb Thick mode. The Thick mode needs Oracle Client libraries 11.2 or later. Note that version 19 is not supported on Windows 7.
    * - Action
      - Review the installation requirements. You can either:

        - Follow the steps documented in `DPI-1047`_ which may help.

        - Or maybe use node-oracledb Thin mode which can be done by removing calls to :meth:`oracledb.initOracleClient()` from your code.

.. _njserr:

NJS Error Messages
------------------

The node-oracledb Thin mode code and node-oracledb Thick mode code
generates error messages with the prefix ``NJS``.

.. _njs116:

NJS-116
+++++++

.. list-table-with-summary::
    :stub-columns: 1
    :class: wy-table-responsive
    :widths: 5 35
    :summary: The first row displays the NJS-116 error message. The second row displays the probable cause for the NJS-116 error. The third row displays the possible solution to resolve the NJS-116 error.

    * - Message
      - ``NJS-116: password verifier type 0x939 is not supported by node-oracledb in Thin mode.``
    * - Cause
      - Connecting to Oracle Database with node-oracledb Thin mode failed because your user account was only created with a 10G password verifier. Node-oracledb Thin mode supports password verifiers 11G and later. See :ref:`pwverifier`.
    * - Action
      - You can either:

        - Database administrators can verify if your username only uses the 10G password verifier with this query:

          .. code-block:: sql

                SELECT USERNAME FROM DBA_USERS
                WHERE ( PASSWORD_VERSIONS = '10G '
                OR PASSWORD_VERSIONS = '10G HTTP ')
                AND USERNAME <> 'ANONYMOUS';

          If your username uses the 10G password verifier, then you need to upgrade your password verifier in Oracle Database to 11G or later to use node-oracledb Thin mode. To upgrade your password verifier, see `Finding and Resetting User Passwords That Use the 10G Password Verifier <https://www.oracle.com/pls/topic/lookup?ctx=dblatest&id=GUID-D7B09DFE-F55D-449A-8F8A-174D89936304>`__ for the detailed steps.

        - Or :ref:`enable Thick mode <enablingthick>` since node-oracledb Thick mode supports password verifiers 10G and later.

.. _oraerr:

ORA Error Messages
------------------

The error messages with the prefix ``ORA`` are generated by Oracle Database.

.. _ora0107:

ORA-0107
++++++++

.. list-table-with-summary::
    :stub-columns: 1
    :class: wy-table-responsive
    :widths: 5 35
    :summary: The first row displays the ORA-0107 error message. The second row displays the probable cause for the ORA-0107 error. The third row displays the possible solution to resolve the ORA-0107 error.

    * - Message
      - ``ORA-01017: invalid credential or not authorized; logon denied``
    * - Cause
      - An invalid credential was provided when accessing the Oracle Database or you were not authorized to access this database.
    * - Action
      - If external authentication is set to *true*, then verify the following:

        - If :ref:`TLS Authentication <tlsextauth>` is enabled, then ensure that:

          - A user has been created in Oracle Database corresponding to the distinguished name (DN) in the user certificate using::

                CREATE USER user_name IDENTIFIED EXTERNALLY AS 'user DN on certificate';

          - The parameter ``SSL_CLIENT_AUTHENTICATION`` is set to *TRUE* in the server-side :ref:`sqlnet.ora <tnsadmin>` file.

        - If you are using :ref:`token-based authentication <tokenbasedauthentication>`, then ensure that you have provided a valid user access token.

        Note that storing password credentials in an Oracle wallet is not supported in node-oracledb Thin mode.
